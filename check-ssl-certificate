#!/bin/bash
#
# LICENSE
# This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.
# AUTHOR thonixx
# CREATED July 11, 2013

#######
# TRAPS
#######

# trap for missing sys bins
trap 'echo "Error: Some of the required packages not installed: openssl, host."; exit 1' SIGUSR1

# temporary files

# temporary files for the certificates
tmpcrtip="$(mktemp '/tmp/tmpcrtip.XXXXXX')"
tmpcrtsni="$(mktemp '/tmp/tmpcrtsni.XXXXXX')"

# trap for removing temp files
trap 'rm -f "$tmpcrtip" "$tmpcrtsni"' EXIT INT HUP SIGHUP SIGINT SIGTERM

###########
# END TRAPS
###########

# OK, now we use getopt from util-linux
usage ()
{
echo "Usage:
    ${0##*/} -H <hostname> [options]

Description:
    Print which SSL certificate is used for the secure connection to the given host.

Options:
    -H/--hostname server
        IP address or hostname to connect to

    -i/--ip IP address
        Define a custom IP to connect to
        In combination with -H and useful when DNS is not yet ready

    -p/--port port number
        Port number to connect to (default: 443)

    --robot
        Output timestamp instead of human readable date

    --save-details
        Save X509 certificate as file

    --print-details
        Print X509 certificate details

    --starttls protocol
        Use StartTLS (use any protocol supported by openssl (i.e. smtp, imap, ...)

    I need help:
    ****
    -h/--help               this help"
}
PARAM="$(getopt -o hp:H:i: --long help,port:,hostname:,ip:,robot,print-details,save-details,starttls: -- "$@")"

# function valid_ip
# source: http://www.linuxjournal.com/content/validating-ip-address-bash-script
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# ok I'm honest.. This part is copied from an existing script of a friend
eval set -- "${PARAM}"
while true ; do
        case "${1}" in
                -H|--hostname) hostname="${2}" ; shift 2 ;;
                -i|--ip) customip="${2}" ; shift 2 ;;
                -p|--port) port="${2}" ; shift 2 ;;
                --robot) robot='true'; shift ;;
                --print-details) printx509='true'; shift ;;
                --save-details) savex509='true'; shift ;;
                --starttls) starttls="-starttls ${2}"; shift 2 ;;
                -h|--help) usage ; exit 0 ;;
                --) shift ; break ;;
                *) echo -e "Some weird error..\nI'm sorry.\nSomething with parameters is going wrong." ; exit 1 ;;
        esac
done

if [ -z "${hostname}" ]
then
    usage
    exit 0
fi

# first some system binaries
OPENSSL="$(which openssl || kill -10 $$)"
BASH="$(which bash || kill -10 $$)"

#################################
# now lets begin with the script
#################################

# we need port and ip
if [ -z "${port}" ]
then
    port='443'
fi

# grep for possible ip in argument
hostarg="$(
    echo "${hostname}" \
        | grep -Eo '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' \
        | head -n 1
)"

# print notice about non-fqdn input
if [[ -z $(
    echo -n "${hostname}" \
        | grep -oP '(?=^.{4,255}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\.)+[a-zA-Z]{2,63}$)'
    ) ]]
then
    echo -e "$(tput setaf 6)Get more accurate results with an $(tput sgr 0 1; tput setaf 6; tput bold)FQDN$(tput sgr0)$(tput setaf 6) hostname.$(tput sgr0)\n"
fi

# check if ip or hostname is given as argument
if [ -z "${hostarg}" ] && [ -z "${customip}" ]
then
    # this case applies when argument is not an IP and no custom IP was requested

    # get the ip address with host command
    ahosts_out="$(
        getent ahostsv4 "${hostname}" \
            || echo 'nope'
    )"
    ahosts_ip="$(
        echo "${ahosts_out}" \
            | head -n1 \
            | awk '{print $1}'
    )"

    # check for DNS query status
    if [ "${avhostsv4_output}" == 'nope' ]
    then
        echo "Can not resolve '${hostname}'.."
        exit 1
    else
        ip="${ahosts_ip}"
    fi

    # define that there is not only IP
    iponly='false'
elif [ -z "${customip}" ]
then
    # this case applies when argument is an IP and no custom IP is requested
    ip="${hostarg}"
    iponly='true'
elif [ "${customip}" ]
then
    # this case applies when custom IP was requested
    ip="${customip}"
    echo "Custom IP requested: ${ip}"
    echo

    # define that there is not only IP
    iponly='false'
else
    # this case should never apply
    # therefore exit and throw error
    echo 'Error while executing script. This should not happen, theoretically.'
    echo 'Examine with 'bash -x'.'
    exit 1
fi

# check if ip exists
if [ -z "${ip}" ]
then
    echo "There was no IP in the DNS record for ${hostname}."
    exit 1
fi

##########################
# save certificate to file

# storing the certificate without SNI
osslIPout="$(
    timeout 5 ${BASH} -c "echo 'EOT' | ${OPENSSL} s_client ${starttls} -connect ${ip}:${port} 2>&1"
)"

# storing the certificate with SNI but maybe with a custom IP
if [ "${iponly}" == 'false' ] && [ "${customip}" ]
then
    osslSNIout="$(
        timeout 5 ${BASH} -c "echo 'EOT' | ${OPENSSL} s_client ${starttls} -servername ${hostname} -connect ${customip}:${port} 2>&1"
    )"
fi

# storing the certificate with SNI
if [ "$iponly" == 'false' ] && [ -z "${customip}" ]
then
    osslSNIout="$(
        timeout 5 ${BASH} -c "echo 'EOT' | ${OPENSSL} s_client ${starttls} -servername ${hostname} -connect ${hostname}:${port} 2>&1"
    )"
fi

###################################
# error handling of openssl command

# check if output contains something about refused connection
if \
    [[ "${osslIPout}" =~ .*connect:\ Connection\ refused.* ]] \
    || [[ "${osslSNIout}" =~ .*connect:\ Connection\ refused.* ]] \
    || [[ \
        "${osslIPout}" =~ .*:error:.* \
        && "$(echo "${osslIPout}" | grep -E '.*:error:.*GET_SERVER_HELLO:reason\(1112\).*')" \
        ]] \
    || [[ \
        "${osslSNIout}" =~ .*:error:.* \
        && "$(echo "${osslIPout}" | grep -E '.*:error:.*GET_SERVER_HELLO:reason\(1112\).*')" \
        ]]
then
    # this runs if something failed

    # print if connection failed
    echo -n "$(tput setaf 1)Connection failed or resulted in an error (IP: ${ip}, Host: "

    # print ip (and hostname)
    if [ "${hostname}" ]
    then
        echo -n "${hostname}"
    else
        echo -n 'none'
    fi

    # finish statement
    echo ", Port: ${port})!$(tput sgr0)"

    # debug output
    # WORK IN PROGRESS IN THIS PART
    echo ""
    echo "Debug output:"
    if [[ "${osslIPout}" =~ .*:error:.* ]]
    then
        echo "${osslIPout}" | grep "error"
    fi
    if [[ "${osslSNIout}" =~ .*:error:.* ]] && [ "${iponly}" == 'false' ]
    then
        echo "${osslSNIout}" | grep 'error'
    fi

    # error exit
    exit 1
else
    # this runs if nothing failed

    # if no refused connection, go forward with certificate
    echo "${osslIPout}" \
        | sed -n '/^-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' > "${tmpcrtip}"
    echo "${osslSNIout}" \
        | sed -n '/^-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' > "${tmpcrtsni}"

    # check if something is inside the cert files
    nosni='false'

    if [ "$(wc -l "${tmpcrtip}" | awk '{print $1}' )" -lt 3 ]
    then
        echo 'There was no certificate on the IP.'
        exit 1
    fi

    if [ "${iponly}" == 'true' ]
    then
        nosni='true'
    elif [ "$(wc -l "${tmpcrtsni}" | awk '{print $1}' )" -lt 3 ]
    then
        nosniMsg='There was no certificate with SNI.'
        nosni='true'
    fi
fi

###########################
# common name and alt names

# get the certificate CN from certificate on the IP
ipdomain="$(
    ${OPENSSL} x509 -in "${tmpcrtip}" -noout -subject \
        | grep -Eo 'CN ?= ?(.*),*' \
        | sed -r "s/CN ?= ?//" \
        | sed -r "s/,.*//" \
        | awk -F/ '{print $1}'
)"

ipdomainMD="$(
    ${OPENSSL} x509 -in "${tmpcrtip}" -noout -text -certopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_pubkey,no_sigdump,no_aux \
        | sed -n '/X509v3 Subject Alternative Name/,+1p' \
        | sed -n 's/^\s*//g;2p'
)"

# use sni for the common name and certificate
if [ "${iponly}" == 'false' ] && [ "${nosni}" == 'false' ]
then
    snidomain="$(
        ${OPENSSL} x509 -in "${tmpcrtsni}" -noout -subject \
            | grep -Eo 'CN ?= ?(.*),*' \
            | sed -r "s/CN ?= ?//" \
            | sed -r "s/,.*//" \
            | awk -F/ '{print $1}'
    )"
fi
if [ "$iponly" == "false" ] && [ "$nosni" == "false" ]
then
    snidomainMD="$(
        ${OPENSSL} x509 -in "${tmpcrtsni}" -noout -text -certopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_subject,no_issuer,no_pubkey,no_sigdump,no_aux \
            | sed -n '/X509v3 Subject Alternative Name/,+1p' \
            | sed -n 's/^\s*//g;2p'
    )"
fi

###############
# serial number

# get certificate serial
ipSerial="$(
    ${OPENSSL} x509 -in "${tmpcrtip}" -noout -serial \
        | awk -F= '{print $2}'
)"

# compare sni/ip cert serial to determine if same cert for sni and ip
ipSig="$(
    ${OPENSSL} x509 -in "${tmpcrtip}" -noout -text \
        | grep -Eo 'Signature Algorithm:(.*)$' \
        | awk -F: '{print $2}' \
        | sed 's/^\ //g' \
        | head -n 1
)"

# get certificate serial
if [ "$iponly" == 'false' ] && [ "${nosni}" == 'false' ]
then
    sniSerial="$(
        ${OPENSSL} x509 -in "${tmpcrtsni}" -noout -serial \
            | awk -F= '{print $2}'
    )"
fi
# get certificate signature algorithm
if [ "$iponly" == "false" ] && [ "$nosni" == "false" ]
then
    sniSig="$(
        ${OPENSSL} x509 -in "${tmpcrtsni}" -noout -text \
            | grep -Eo 'Signature Algorithm:(.*)$' \
            | awk -F: '{print $2}' \
            | sed 's/^\ //g' \
            | head -n 1
    )"
fi
# compare sni/ip cert serial to determine if same cert for sni and ip
if [ "${ipSerial}" == "${sniSerial}" ] && [ "${sniSerial}" ]
then
    iponly='true'
    sameserial='true'
else
    # iponly='false'
    sameserial='false'
fi

#####################
# start and end dates

# get the dates of the certificate
ipdate="$(
    ${OPENSSL} x509 -in "${tmpcrtip}" -noout -dates \
        | cut -d = -f 2- \
        | sed 's/^ *//g'
)"
ipdateHuman="$(
    echo "${ipdate}" \
        | xargs -n 1 -I {} date -d '{}' '+%B %d, %Y (%H:%M %Z)'
)"

# output parseable date
if [ "$robot" == 'true' ]
then
    ipdateHuman="$(
        echo "${ipdate}" \
            | xargs -n 1 -I {} date +'%s' -d'{}'
    )"
fi

# get the dates of the certificate with SNI
if [ "${iponly}" == 'false' ] && [ "${nosni}" == 'false' ]
then
    snidate="$(
        ${OPENSSL} x509 -in "${tmpcrtsni}" -noout -dates \
            | cut -d = -f 2- \
            | sed 's/^ *//g'
    )"
fi
if [ "${snidate}" ]
then
    snidateHuman="$(
        echo "${snidate}" \
            | xargs -n 1 -I {} date -d '{}' '+%B %d, %Y (%H:%M %Z)'
    )"
fi

# output parseable date
if [ "${snidate}" ] && [ "${robot}" == 'true' ]
then
    snidateHuman="$(
        echo "${snidate}" \
            | xargs -n 1 -I {} date +'%s' -d'{}'
    )"
fi

###############
# print results

# print the domain without SNI
echo "Domain on IP: ${ipdomain} (${ip})"

# print additonal domains
if [ "${ipdomainMD}" ]
then
    echo "Additional domain(s): $(
        echo "${ipdomainMD}" \
            | sed 's/DNS://g' \
            | sed "s/${ipdomain}//g" \
            | sed 's/^, //g'
    )"
fi

echo '----'

# to set the old ifs at the end
OLDIFS="${IFS}"

# used for the check in the for loop
i=0

# reset variable $line
unset line

# print dates
IFS=$'\n'

# go through the two lines of dates
for line in ${ipdateHuman}
do

    # check if i is set 0
    if [ "${i}" = 0 ]
    then
        # then decide wether to echo start date
        printf '%-23s %20s\n' 'Start date:' "${line}"
    else
        # or echo end date
        printf '%-23s %20s\n' 'End date:' "${line}"
    fi

    # another check to reverse set the variable
    if [ "${i}" = 0 ]
    then
        i=1
    else
        i=0
    fi

done

# print serial number
printf '%-23s %20s\n' 'Serial number:' "${ipSerial}"

# print signature algorithm
printf '%-23s %20s\n' 'Signature Algorithm:' "${ipSig}"

# print certificate
if [ "${printx509}" == 'true' ]
then
    echo
    cat $tmpcrtip | $OPENSSL x509 -noout -text
fi

# save certificate
if [ "${savex509}" == 'true' ]
then
    echo
    cp -v "${tmpcrtip}" "/tmp/IP_${hostname}_${port}.crt"
fi

# set the old ifs
IFS="${OLDIFS}"

# now the SNI part

# to set the old ifs at the end
OLDIFS="${IFS}"

# used for the check in the for loop
i=0

# reset variable $line
unset line

# print dates
IFS=$'\n'

if [ "${iponly}" == 'false' ] && [ "${nosni}" == 'false' ]
then
    # print the SNI domain
    echo
    echo
    echo "Domain with SNI: ${snidomain}"
    # print additonal domains
    if [ "$snidomainMD" ]
    then
        echo "Additional domain(s): $(
            echo "${snidomainMD}" \
                | sed 's/DNS://g' \
                | sed "s/${snidomain}//g" \
                | sed 's/^, //g'
        )"
    fi
    echo '----'

    # to set the old ifs at the end
    OLDIFS="${IFS}"

    # used for the check in the for loop
    i=0

    # print dates
    IFS=$'\n'

    # go through the two lines of dates
    for line in ${snidateHuman}
    do

        # check if i is set 0
        if [ "${i}" = 0 ]
        then
            # then decide wether to echo start date
            printf '%-23s %20s\n' 'Start date:' "${line}"
        else
            # or echo end date
            printf '%-23s %20s\n' 'End date:' "${line}"
        fi

        # another check to reverse set the variable
        if [ "${i}" = 0 ]
        then
            i=1
        else
            i=0
        fi

    done

    # print serial number
    printf '%-23s %20s\n' 'Serial number:' "${sniSerial}"

    # print signature algorithm
    printf '%-23s %20s\n' 'Signature Algorithm:' "${sniSig}"

    # print certificate
    if [ "${printx509}" == 'true' ]
    then
        echo
        cat "${tmpcrtsni}" \
            | ${OPENSSL} x509 -noout -text
    fi

    # save certificate
    if [ "${savex509}" == 'true' ]
    then
        echo
        cp -v "${tmpcrtsni}" "/tmp/SNI_${hostname}_${port}.crt"
    fi

    # set the old ifs
    IFS="${OLDIFS}"

elif [ "${sameserial}" == 'true' ]
then

    # print this notice if same certificate for sni and IP
    echo
    echo 'Notice: Same certificate for SNI as for IP.'

elif [ "${nosniMsg}" ] && [ "${iponly}" == 'false' ]
then

    # print message about no SNI certificate but only when hostname is given
    echo
    echo "${nosniMsg}"

fi
